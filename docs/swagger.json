{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/books": {
            "get": {
                "description": "Filters all books by query parameters 'author','category','prefix'.all paramters are not mandatory. details of all books will be given if no paramters are provided.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Filters books",
                "parameters": [
                    {
                        "type": "string",
                        "description": "author",
                        "name": "author",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "prefix",
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Books",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Book"
                            }
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new Book, details should be passed in JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Creates a new Book",
                "parameters": [
                    {
                        "description": "Book details",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book details",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/books/{id}": {
            "delete": {
                "description": "Deletes a existing book By its ID",
                "tags": [
                    "Books"
                ],
                "summary": "To Delete Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BookID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.Message"
                        }
                    },
                    "500": {
                        "description": "Error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/borrow": {
            "post": {
                "description": "Creates a new Book Transaction, member_id and book_id should be passed in JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Book-Transactions"
                ],
                "summary": "Creates a new Book Transaction",
                "parameters": [
                    {
                        "description": "Request for bookTransaction",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book-Transaction details",
                        "schema": {
                            "$ref": "#/definitions/models.BookTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/borrow/{id}": {
            "get": {
                "description": "Gets list of all books books borrowed by memberID which are not returned yet.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Book-Transactions"
                ],
                "summary": "Gets list of all books borrowed By member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "member_id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "details of books",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Book"
                            }
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/members": {
            "post": {
                "description": "Creates a new member, details should be passed in JSON. name and phone number is mandatory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "members"
                ],
                "summary": "Creates a new Member",
                "parameters": [
                    {
                        "description": "Member details",
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member details",
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the member using MemberID and PhoneNumber passed as query parameters",
                "tags": [
                    "members"
                ],
                "summary": "To delete a Member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Phone Number",
                        "name": "phone",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success message",
                        "schema": {
                            "$ref": "#/definitions/handlers.Message"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/members/{id}": {
            "get": {
                "description": "Get details of a member by their ID",
                "tags": [
                    "members"
                ],
                "summary": "Get Member by Member ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member details",
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/return": {
            "patch": {
                "description": "Updates the book-transaction, returned_date and penalty is populated in the system, member_id and book_id should be passed in JSON.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Book-Transactions"
                ],
                "summary": "Updates the Book-transaction",
                "parameters": [
                    {
                        "description": "Request for  returnbook",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "details of ReturnedBooks",
                        "schema": {
                            "$ref": "#/definitions/models.BookReturnTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.Message": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "book_id": {
                    "type": "integer"
                },
                "category": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.BookRequest": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.BookReturnTransactionResponse": {
            "type": "object",
            "properties": {
                "books": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "bookID": {
                                "type": "integer"
                            },
                            "borrowdate": {
                                "type": "string"
                            },
                            "dueDate": {
                                "type": "string"
                            },
                            "errorMessage": {
                                "type": "string"
                            },
                            "penalty": {
                                "type": "integer"
                            },
                            "returned_Date": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string"
                            }
                        }
                    }
                },
                "member": {
                    "type": "object",
                    "properties": {
                        "memberID": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "models.BookTransactionRequest": {
            "type": "object",
            "properties": {
                "book_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "member_id": {
                    "type": "string"
                }
            }
        },
        "models.BookTransactionResponse": {
            "type": "object",
            "properties": {
                "books": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "bookID": {
                                "type": "integer"
                            },
                            "borrowdate": {
                                "type": "string"
                            },
                            "dueDate": {
                                "type": "string"
                            },
                            "errorMessage": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string"
                            }
                        }
                    }
                },
                "member": {
                    "type": "object",
                    "properties": {
                        "memberID": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Member": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "member_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.MemberRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        }
    }
}